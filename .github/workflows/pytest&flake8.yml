# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Run PyTest and Flake8 for testing and linting

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

  push: # Triggers the workflow on push events but only for main and development branch
      branches: [ "main" ] # Push events are not trigger for forks

  pull_request: # Triggers the workflow on pull request events but only for main and development branch
    branches: [ "main", "development" ] # Push events are not trigger for forks

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false # Don't stop all jobs if one fails
      matrix:
        python-version: [ "3.9", "3.10", "3.11" ] # Test against multiple Python versions

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: Gr1N/setup-poetry@v8 # Sets up poetry latest version
      - uses: actions/cache@v2 # caches the virtualenv
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - run: poetry --version
      - run: poetry install -v # Install dependencies

      - name: Lint with flake8 # Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Test with PyTest # Run pytest
        run: |
          poetry run pytest